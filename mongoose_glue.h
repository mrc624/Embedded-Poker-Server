// SPDX-FileCopyrightText: 2024 Cesanta Software Limited
// SPDX-License-Identifier: GPL-2.0-only or commercial
// Generated by Mongoose Wizard, https://mongoose.ws/wizard/

#ifndef MONGOOSE_GLUE_H
#define MONGOOSE_GLUE_H

#ifdef __cplusplus
extern "C" {
#endif

#include "mongoose.h"

////////////////////////////////////////////// HTTP
#define WIZARD_ENABLE_HTTP 1
#define WIZARD_ENABLE_HTTPS 0
#define WIZARD_ENABLE_HTTTP_UI 0
#define WIZARD_ENABLE_HTTP_UI_LOGIN 1

//////////////////////////////////////////////  MQTT
#define WIZARD_ENABLE_MQTT 0
#define WIZARD_MQTT_URL ""

//////////////////////////////////////////////  SNTP
#define WIZARD_ENABLE_SNTP 0  // Enable time sync.
#define WIZARD_SNTP_TYPE 0    // 0: default Google, 1: DHCP, 2: custom
#define WIZARD_SNTP_URL "udp://time.google.com:123"  // Custom SNTP server URL
#define WIZARD_SNTP_INTERVAL_SECONDS 3600            // Frequency of SNTP syncs

//////////////////////////////////////////////  DNS
#define WIZARD_DNS_TYPE 0     // 0: default Google, 1: DHCP, 2: custom
#define WIZARD_DNS_URL "udp://8.8.8.8:53"            // Custom DNS server URL

//////////////////////////////////////////////  MODBUS
#define WIZARD_ENABLE_MODBUS 0
#define WIZARD_MODBUS_PORT 502

//////////////////////////////////////////////  Initialize & run
void mongoose_init(void);    // Initialise Mongoose
void mongoose_poll(void);    // Poll Mongoose
extern struct mg_mgr g_mgr;  // Mongoose event manager
void glue_init(void);        // Called at the end of mongoose_init()

#define run_mongoose() \
  do {                 \
    mongoose_init();   \
    for (;;) {         \
      mongoose_poll(); \
    }                  \
  } while (0)

#if WIZARD_ENABLE_MQTT
void glue_lock_init(void);  // Initialise global Mongoose mutex
void glue_lock(void);       // Lock global Mongoose mutex
void glue_unlock(void);     // Unlock global Mongoose mutex
#else
#define glue_lock_init()
#define glue_lock()
#define glue_unlock()
#endif

// Print arbitrary string. Supported format is printf, plus %m/%M, see
// https://mongoose.ws/documentation/#mg_snprintf-mg_vsnprintf
size_t glue_printf(void *context, const char *format, ...);

// Firmware Glue


int    glue_authenticate(const char *user, const char *pass);

bool glue_check_reboot(void);
void glue_start_reboot(void);
void *glue_ota_begin_firmware_update(char *file_name, size_t total_size);
bool glue_ota_end_firmware_update(void *context);
bool glue_ota_write_firmware_update(void *context, void *buf, size_t len);
void *glue_file_open_file_upload(char *file_name, size_t total_size);
bool glue_file_close_file_upload(void *context);
bool glue_file_write_file_upload(void *context, void *buf, size_t len);
struct state {
  int speed;
  int temperature;
  int humidity;
  int uptime;
  char version[20];
  bool online;
  bool lights;
  int level;
};
struct state *glue_get_state(void);
void glue_set_state(struct state *);

struct leds {
  bool led1;
  bool led2;
  bool led3;
};
struct leds *glue_get_leds(void);
void glue_set_leds(struct leds *);

struct settings {
  char string_val[40];
  int log_level;
  double double_val;
  int int_val;
  bool bool_val;
};
struct settings *glue_get_settings(void);
void glue_set_settings(struct settings *);

struct security {
  char admin_password[40];
  char user_password[40];
};
struct security *glue_get_security(void);
void glue_set_security(struct security *);


#ifdef __cplusplus
}
#endif
#endif  // MONGOOSE_GLUE_H
